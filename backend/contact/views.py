from datetime import datetime
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework import status
from django.core.mail import EmailMessage
import requests
from .models import HelpServiceContact, HelpServiceLog
from django.conf import settings

from rest_framework import viewsets
from .models import HelpServiceContact
from .serializers import ContactSerializer
from backend.permissions import IsAdminManagerOrReadOnly
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from .models import HelpServiceLog
from .serializers import HelpServiceLogSerializer


class ContactViewSet(viewsets.ModelViewSet):
    queryset = HelpServiceContact.objects.all()
    serializer_class = ContactSerializer
    permission_classes = [IsAdminManagerOrReadOnly]


BOT_TOKEN = settings.BOT_TOKEN


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def urgent_call_request(request):
    contact_id = request.data.get('contact_id')  # –∫–æ–º—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ

    if not contact_id:
        return Response({'error': '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç'}, status=status.HTTP_400_BAD_REQUEST)

    try:
        contact = HelpServiceContact.objects.get(id=contact_id)
        recipient_email = contact.email.strip() if contact.email else None
        if not recipient_email:
            return Response({'error': 'Email –∫–æ–Ω—Ç–∞–∫—Ç—É –ø–æ—Ä–æ–∂–Ω—ñ–π'}, status=status.HTTP_400_BAD_REQUEST)

    except HelpServiceContact.DoesNotExist:
        return Response({'error': '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}, status=status.HTTP_404_NOT_FOUND)

    # –ö–ª—ñ—î–Ω—Ç, —â–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –∑–∞–ø–∏—Ç
    client_name = getattr(request.user, 'full_name', None) or request.user.username
    client_phone = getattr(request.user, 'phone_number', None) or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

    message = f"üìû –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –∫–ª—ñ—î–Ω—Ç—É {client_name} –∑–∞ –Ω–æ–º–µ—Ä–æ–º {client_phone}."
    success = True
    errors = []

    # Telegram
    if contact.telegram_id:
        try:
            telegram_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            resp = requests.post(telegram_url, data={'chat_id': contact.telegram_id, 'text': message})
            resp.raise_for_status()
        except Exception as e:
            errors.append(f"Telegram error: {e}")
            success = False

    # Email —á–µ—Ä–µ–∑ EmailMessage –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–∏—Ä–∏–ª–∏—Ü—ñ
    if recipient_email:
        try:
            email = EmailMessage(
                subject="üî¥ –¢–µ—Ä–º—ñ–Ω–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –∫–ª—ñ—î–Ω—Ç—É",
                body=message,
                from_email=settings.EMAIL_HOST_USER,
                to=[recipient_email],
            )
            email.send(fail_silently=False)
        except Exception as e:
            errors.append(f"Email error: {e}")
            success = False

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
    try:
        HelpServiceLog.objects.create(
            create_date=datetime.now(),
            contact_id=contact,
            success=success,
            call_type=1,
            user=request.user
        )
    except Exception as e:
        errors.append(f"Logging error: {e}")

    response_data = {'detail': '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ', 'success': success}
    if errors:
        response_data['errors'] = errors

    return Response(response_data, status=status.HTTP_200_OK)


from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from .models import HelpServiceLog
from .serializers import HelpServiceLogSerializer


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def help_log_list(request):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö SOS-–≤–∏–∫–ª–∏–∫—ñ–≤ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–µ–Ω–µ–¥–∂–µ—Ä–∞),
    –≤–∫–ª—é—á–∞—é—á–∏ —Ö—Ç–æ –≤–∏–∫–ª–∏–∫–∞–≤ —ñ –∫–æ–º—É.
    """
    logs = HelpServiceLog.objects.select_related('contact_id', 'user').order_by('-create_date')
    serializer = HelpServiceLogSerializer(logs, many=True)
    return Response(serializer.data)
