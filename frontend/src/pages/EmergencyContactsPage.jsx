import React, { useEffect, useState } from 'react';
import axiosInstance from '../api/axios';
import { useAuth } from '../hooks/useAuth';
import { useNotification } from '../components/notification/Notifications';
import './EmergencyContactsPage.css';

const EmergencyContactsPage = () => {
  const [contacts, setContacts] = useState([]);
  const { user } = useAuth();
  const { addNotification } = useNotification();

  const role = localStorage.getItem('role');
  const isAdmin = role === 'admin';
  
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingContact, setEditingContact] = useState(null);
  const [newContact, setNewContact] = useState({
    name: '',
    phone: '',
    email: '',
    telegramId: '',
    department: '',
  });

  const [deleteContactId, setDeleteContactId] = useState(null); // –¥–ª—è –º–æ–¥–∞–ª–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  const [isSending, setIsSending] = useState(false);

  useEffect(() => {
    fetchContacts();
  }, []);

  const fetchContacts = async () => {
    try {
      const response = await axiosInstance.get('/contacts/');
      setContacts(response.data);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:', error);
      addNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤', 'error');
    }
  };

  const openEditModal = (contact) => {
    setEditingContact(contact);
    setNewContact({
      name: contact.contact_name,
      phone: contact.phone,
      email: contact.email,
      telegramId: contact.telegram_id || '',
      department: contact.department,
    });
    setIsModalOpen(true);
  };

  const closeModal = () => {
    if (!isSending) {
      setEditingContact(null);
      setDeleteContactId(null);
      setIsModalOpen(false);
      setNewContact({ name: '', phone: '', email: '', telegramId: '', department: '' });
    }
  };

  const handleSaveContact = async (e) => {
    e.preventDefault();
    const { name, phone, email, telegramId, department } = newContact;
    if (!name || !phone || !email || !department) {
      return addNotification('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 'warning');
    }

    setIsSending(true);
    const payload = { contact_name: name, phone, email, telegram_id: telegramId, department };

    try {
      let updatedContact;
      if (editingContact) {
        const response = await axiosInstance.put(`/contacts/${editingContact.id}/`, payload);
        updatedContact = response.data;
        setContacts((prev) =>
          prev.map((c) => (c.id === editingContact.id ? updatedContact : c))
        );
        addNotification('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ', 'success');
      } else {
        const response = await axiosInstance.post('/contacts/', payload);
        updatedContact = response.data;
        setContacts((prev) => [...prev, updatedContact]);
        addNotification('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–¥–∞–Ω–æ', 'success');
      }
      closeModal();
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É:', error);
      addNotification('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç', 'error');
    } finally {
      setIsSending(false);
    }
  };

  const openDeleteModal = (contactId) => {
    setDeleteContactId(contactId);
  };

  const handleDeleteContact = async () => {
    if (!deleteContactId) return;
    setIsSending(true);
    try {
      await axiosInstance.delete(`/contacts/${deleteContactId}/`);
      setContacts((prev) => prev.filter((c) => c.id !== deleteContactId));
      addNotification('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
      closeModal();
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É:', error);
      addNotification('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç', 'error');
    } finally {
      setIsSending(false);
    }
  };

  const handleCallContact = async (contactId) => {
    if (!contactId || isSending) return;
    setIsSending(true);
    addNotification('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è...', 'info');
    try {
      const payload = {
        contact_id: contactId,
        client_name: user?.full_name || user?.username || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      };
      await axiosInstance.post('/urgent-call/', payload);
      addNotification('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ', 'success');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      addNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', 'error');
    } finally {
      setIsSending(false);
    }
  };

  return (
    <div className="emergency-portal-body">
      <h1 className="text-color mt-3 text-4xl font-bold pb-0">
        –ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ–≥–æ –¥–∑–≤—ñ–Ω–∫–∞
      </h1>
      <div style={{ border: '1px dashed #ccc', marginBottom: '5px' }}></div>

      <div className="space-y-6">
        {contacts.length === 0 && (
          <p className="text-center text-gray-500">–ö–æ–Ω—Ç–∞–∫—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.</p>
        )}
        {contacts.map((contact) => (
          <div key={contact.id} className="emergency-contact-item">
            <div className="emergency-column">
              <div className="emergency-text-info">{contact.contact_name}</div>
              <div className="emergency-text-grey flex items-center gap-2">
                <span className="text-red-500 text-lg">üìû</span> {contact.phone || '-'}
              </div>
              <div className="emergency-text-grey flex items-center gap-2">
                <span className="text-blue-500 text-lg">‚úâÔ∏è</span> {contact.email || '-'}
              </div>
              <div className="emergency-text-grey italic text-sm flex items-center gap-2">
                <span className="text-green-500 text-lg">üß©</span> {contact.department || '-'}
              </div>
            </div>

            <div className="flex gap-2">
              <button
                onClick={() => handleCallContact(contact.id)}
                className="emergency-button-call"
                disabled={isSending}
              >
                –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏
              </button>

              {isAdmin && (
                <>
                  <button
                    onClick={() => openEditModal(contact)}
                    className="emerg-btn-save"
                  >
                    –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                  </button>
                  <button
                    onClick={() => openDeleteModal(contact.id)}
                    className="emerg-btn-cancel"
                  >
                    –í–∏–¥–∞–ª–∏—Ç–∏
                  </button>
                </>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* –ú–æ–¥–∞–ª –¥–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è */}
      {isModalOpen && (
        <div className="video-modal-overlay" onClick={closeModal}>
          <div className="video-modal-window" onClick={(e) => e.stopPropagation()}>
            <div className="video-modal-header">
              <h3>{editingContact ? '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É' : '‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç'}</h3>
              <button className="video-close-btn" onClick={closeModal}>‚úï</button>
            </div>
            <form className="video-form" onSubmit={handleSaveContact}>
              <div className="modal-field">
                <input
                  value={newContact.name}
                  onChange={(e) => setNewContact({ ...newContact, name: e.target.value })}
                  placeholder="–Ü–º'—è"
                  required
                  className="video-input"
                />
              </div>
              <div className="modal-field">
                <input
                  value={newContact.phone}
                  onChange={(e) => setNewContact({ ...newContact, phone: e.target.value })}
                  placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
                  required
                  className="video-input"
                />
              </div>
              <div className="modal-field">
                <input
                  value={newContact.email}
                  onChange={(e) => setNewContact({ ...newContact, email: e.target.value })}
                  placeholder="Email"
                  type="email"
                  required
                  className="video-input"
                />
              </div>
              <div className="modal-field">
                <input
                  value={newContact.telegramId}
                  onChange={(e) => setNewContact({ ...newContact, telegramId: e.target.value })}
                  placeholder="Telegram ID"
                  className="video-input"
                />
              </div>
              <div className="modal-field">
                <input
                  value={newContact.department}
                  onChange={(e) => setNewContact({ ...newContact, department: e.target.value })}
                  placeholder="–í—ñ–¥–¥—ñ–ª"
                  required
                  className="video-input"
                />
              </div>
              <div className="video-modal-footer">
                <button type="button" className="video-btn-cancel" onClick={closeModal}>‚úï –°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                <button type="submit" className="video-btn-save">
                  {isSending ? '–ó–±–µ—Ä—ñ–≥–∞—é...' : editingContact ? 'üíæ –û–Ω–æ–≤–∏—Ç–∏' : 'üíæ –î–æ–¥–∞—Ç–∏'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª –≤–∏–¥–∞–ª–µ–Ω–Ω—è */}
      {deleteContactId && (
        <div className="video-modal-overlay" onClick={closeModal}>
          <div className="video-modal-window" onClick={(e) => e.stopPropagation()}>
            <div className="video-modal-header">
              <h3>‚ö†Ô∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</h3>
              <button className="video-close-btn" onClick={closeModal}>‚úï</button>
            </div>
            <p className="p-4 text-center">
              –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç?
            </p>
            <div className="video-modal-footer">
              <button className="video-btn-cancel" onClick={closeModal} disabled={isSending}>‚úï –í—ñ–¥–º—ñ–Ω–∏—Ç–∏</button>
              <button className="video-btn-save" onClick={handleDeleteContact} disabled={isSending}>
                {isSending ? '–í–∏–¥–∞–ª—è—é...' : '‚úÖ –í–∏–¥–∞–ª–∏—Ç–∏'}
              </button>
            </div>
          </div>
        </div>
      )}

    </div>
  );
};

export default EmergencyContactsPage;
